/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client.view;

import Client.control.ClientFriendCtr;
import java.awt.Point;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author xSzy
 */
public class ClientFriendFrm extends javax.swing.JFrame
{
    public ClientMainFrm cmf;
    public ClientFriendCtr cfc;
    
    /**
     * Creates new form ClientFriendFrm
     */
    public ClientFriendFrm(ClientMainFrm cmf)
    {
        this.cmf = cmf;
        initComponents();
        cfc = new ClientFriendCtr(this);
        setLocation(cmf.getLocation().x+cmf.getWidth(), cmf.getLocation().y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        popupFriend = new javax.swing.JPopupMenu();
        itemDeleteFriend = new javax.swing.JMenuItem();
        itemInviteFriend = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        listFriend = new javax.swing.JList<>();

        itemDeleteFriend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_remove_friend.png"))); // NOI18N
        itemDeleteFriend.setText("Delete friend");
        itemDeleteFriend.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemDeleteFriendActionPerformed(evt);
            }
        });
        popupFriend.add(itemDeleteFriend);

        itemInviteFriend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_new_chat.png"))); // NOI18N
        itemInviteFriend.setText("Invite to channel");
        itemInviteFriend.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemInviteFriendActionPerformed(evt);
            }
        });
        popupFriend.add(itemInviteFriend);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Friends");

        listFriend.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Online", "Offline" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listFriend.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listFriend.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                listFriendMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listFriend);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listFriendMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_listFriendMouseClicked
    {//GEN-HEADEREND:event_listFriendMouseClicked
        cfc.listFriendMouseClicked(evt);
    }//GEN-LAST:event_listFriendMouseClicked

    private void itemDeleteFriendActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemDeleteFriendActionPerformed
    {//GEN-HEADEREND:event_itemDeleteFriendActionPerformed
        cfc.itemRemoveFriendClicked();
    }//GEN-LAST:event_itemDeleteFriendActionPerformed

    private void itemInviteFriendActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemInviteFriendActionPerformed
    {//GEN-HEADEREND:event_itemInviteFriendActionPerformed
        cfc.itemInviteClicked();
    }//GEN-LAST:event_itemInviteFriendActionPerformed

    /**
     * This function display the friendlist from input
     */
    public void displayFriendList(ArrayList<String> onlineList, ArrayList<String> offlineList)
    {
        DefaultListModel dlm = new DefaultListModel();
        dlm.addElement(new String("Online"));
        for(String name : onlineList)
            dlm.addElement(new String("    " + name));
        dlm.addElement(new String("Offline"));
        for(String name : offlineList)
            dlm.addElement(new String("    " + name));
        listFriend.setModel(dlm);
    }
    
    /**
     * This function shows a confirm delete message
     */
    public int showDeleteConfirmMessage(String name)
    {
        int option = JOptionPane.showConfirmDialog(this, "Are you sure want to delete " + name + " from your friendlist ?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(option == JOptionPane.YES_OPTION)
            return 1;
        return 0;
    }
    
    /**
     * This function return the selected client name
     */
    public String getSelectedClient()
    {
        int index = listFriend.getSelectedIndex();
        if(index == -1)
            return null;
        else
        {
            String result = listFriend.getModel().getElementAt(index);
            return result.substring(4, result.length());
        }
    }
    
    /**
     * This function shows a popup menu when rightclick to a client
     */
    public void showClientPopupMenu(Point p)
    {
        this.popupFriend.show(listFriend, listFriend.getX() + p.x, listFriend.getY() + p.y);
    }
    
    /**
     * This function shows if a client is online or not
     */
    public boolean isClientOnline(String clientName)
    {
        boolean result = false;
        for(int i = 1; i < listFriend.getModel().getSize(); i++)
        {
            if(listFriend.getModel().getElementAt(i).equals("Offline"))
                break;
            String s = listFriend.getModel().getElementAt(i);
            if(s.substring(4, s.length()).equals(clientName))
                return true;
        }
        return result;
    }
    
    /**
     * This function return if the client is user's friend
     */
    public boolean isFriend(String clientName)
    {
        boolean result = false;
        for(int i = 1; i < listFriend.getModel().getSize(); i++)
        {
            String s = listFriend.getModel().getElementAt(i);
            if(s.substring(4, s.length()).equals(clientName))
                return true;
        }
        return result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemDeleteFriend;
    private javax.swing.JMenuItem itemInviteFriend;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JList<String> listFriend;
    private javax.swing.JPopupMenu popupFriend;
    // End of variables declaration//GEN-END:variables
}
