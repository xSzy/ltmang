/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client.view;

import Client.control.ClientLoginCtr;
import Client.control.ClientMainCtr;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author xSzy
 */
public class ClientLoginFrm extends javax.swing.JFrame
{
    //global variables
    private ClientLoginCtr clc;
    
    /**
     * Creates new form LoginFrm
     */
    public ClientLoginFrm()
    {
        initComponents();
        JRootPane jrp = SwingUtilities.getRootPane(btnLogin);
        jrp.setDefaultButton(btnLogin);
        clc = new ClientLoginCtr(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnRegister = new javax.swing.JButton();
        btnLogin = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtIP = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Server's IP address");

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        btnRegister.setText("Register...");
        btnRegister.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRegisterActionPerformed(evt);
            }
        });

        btnLogin.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnLogin.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnLoginActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel4.setText("Port");

        txtPort.setText("9713");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRegister)
                        .addGap(67, 67, 67)
                        .addComponent(btnLogin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPort, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                            .addComponent(txtUsername)
                            .addComponent(txtPassword))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLogin)
                            .addComponent(btnCancel))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnRegister)
                        .addContainerGap(15, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCancelActionPerformed
    {//GEN-HEADEREND:event_btnCancelActionPerformed
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure want to quit ?", "Quit", JOptionPane.YES_NO_OPTION);
        if(choice == JOptionPane.YES_OPTION)
            System.exit(0);
        else
            return;
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLoginActionPerformed
    {//GEN-HEADEREND:event_btnLoginActionPerformed
        //check availability
        if(txtIP.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter server's IP Address!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtPort.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter server's port!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtUsername.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter your username to continue!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtPassword.getPassword().length == 0)
        {
            JOptionPane.showMessageDialog(this, "Please enter your password to continue!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Thread t = new Thread(new Runnable() {
            @Override
            public void run()
            {
                int result = clc.login(txtIP.getText(), Integer.parseInt(txtPort.getText()), txtUsername.getText(), txtPassword.getPassword());
                switch(result)
                {
                    case 0: //success
                    {
                        finishLogin();
                        ClientLoginFrm.this.dispose();
                        return;
                    }
                    case 1: //cannot connect to server
                    {
                        JOptionPane.showMessageDialog(ClientLoginFrm.this, "Cannot connect to server, please check your internet connection!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    case 2: //username cannot be found
                    {
                        JOptionPane.showMessageDialog(ClientLoginFrm.this, "Username cannot be found!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    case 3: //password incorrect
                    {
                        JOptionPane.showMessageDialog(ClientLoginFrm.this, "Password incorrect!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    case 5: //client is already in server
                    {
                        JOptionPane.showMessageDialog(ClientLoginFrm.this, "Client is already logged in!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        });
        t.start();
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRegisterActionPerformed
    {//GEN-HEADEREND:event_btnRegisterActionPerformed
        //check availability
        if(txtIP.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter server's IP Address!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtPort.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter server's port!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtUsername.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter your username to continue!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(txtPassword.getPassword().length == 0)
        {
            JOptionPane.showMessageDialog(this, "Please enter your password to continue!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Thread t = new Thread(new Runnable() {
            @Override
            public void run()
            {
                int result = clc.register(txtIP.getText(), Integer.parseInt(txtPort.getText()), txtUsername.getText(), txtPassword.getPassword());
                switch(result)
                {
                    case 0: //success
                    {
                        JOptionPane.showMessageDialog(ClientLoginFrm.this, "Register successful!", "Announce", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                    case 1: //cannot connect to server
                    {
                        JOptionPane.showMessageDialog(ClientLoginFrm.this, "Cannot connect to server, please check your internet connection!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    case 2: //username is used
                    {
                        JOptionPane.showMessageDialog(ClientLoginFrm.this, "Username existed! Please choose another username.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
        });
        t.start();
    }//GEN-LAST:event_btnRegisterActionPerformed

    /**
     * This function starts when user is able to log in
     */
    public void finishLogin()
    {
        ClientMainFrm clientMainFrm = new ClientMainFrm(clc.socket, clc.user);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Windows".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ClientLoginFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ClientLoginFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ClientLoginFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ClientLoginFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ClientLoginFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnRegister;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtIP;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
