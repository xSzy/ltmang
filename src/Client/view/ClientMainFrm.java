/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client.view;

import Client.control.ClientFtpCtr;
import Client.control.ClientMainCtr;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JScrollBar;
import javax.swing.JTextPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import javax.swing.text.html.HTMLDocument;
import model.Channel;
import model.Client;
import model.FtpFile;

/**
 *
 * @author ns_red
 */
public class ClientMainFrm extends javax.swing.JFrame {
    
    public ClientMainCtr cmc;
    private File fileSelected;
    private ClientFtpCtr cfc;
    private DefaultTableModel fileTblModel;
    private JFileChooser fileChooser;
    private String currentDirectory = "";
    private String userHomeDirectory = "";
    private String ipServer;
    public ClientFriendFrm cff;
    
    //emoji url
    private final int numberofemo = 10;
    private String[] emoName = {":\\)", ":D", ":C", ":x", ":-&", ":q", ":s", ":-s", ":-\\$", ":-@"};
    private String[] emoPath = 
    {
        "img/emoji/happy.png",
        "img/emoji/happy2.png",
        "img/emoji/angry2.png",
        "img/emoji/inlove.png",
        "img/emoji/ill.png",
        "img/emoji/quiet.png",
        "img/emoji/sleep.png",
        "img/emoji/unhappy.png",
        "img/emoji/man.png",
        "img/emoji/ninja.png"
    };
    private String[] emoAbspath = new String[numberofemo];
    /*H
     * Creates new form ClientMainFrm
     */
    /*public ClientMainFrm(ClientMainCtr cmc)
    {
        this.cmc = cmc;
        initComponents();
        this.setVisible(true);        
        mySetting();
    }*/
    
    public ClientMainFrm(Socket server, Client user)
    {
        initComponents();
        this.setVisible(true); 
        ipServer = server.getInetAddress().getHostAddress();
        mySetting();
        cmc = new ClientMainCtr(this, server, user);
        cff = new ClientFriendFrm(this);
        cff.setVisible(true);
    }
    
    public void mySetting(){        
        txtConsole.setEditable(false);
        msgPanel.remove(channelMsgPanel);
        //listChannel.setComponentPopupMenu(popupChannel);
        cfc = new ClientFtpCtr(ipServer);
        cfc.connect();
        fileTbl.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        fileTblModel = (DefaultTableModel) fileTbl.getModel();
        fileChooser = new JFileChooser();
        userHomeDirectory =  fileChooser.getFileSystemView().getHomeDirectory().getPath();   
        cfc.setUserHomeDirectory(userHomeDirectory);
        for(int i = 0; i < emoPath.length; i++)
        {
            emoAbspath[i] = ClassLoader.getSystemClassLoader().getResource(emoPath[i]).toString();
            System.out.println(emoAbspath[i]);
        }
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        dlgCreate = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTopic = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDesc = new javax.swing.JTextArea();
        txtPassword = new javax.swing.JPasswordField();
        transferPanel = new javax.swing.JDialog();
        fileDownload = new javax.swing.JPanel();
        uploadBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        fileUpload = new javax.swing.JLabel();
        browseBtn = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        fileTbl = new javax.swing.JTable();
        dlgEditChannel = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtChannelName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtChannelTopic = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtChannelDesc = new javax.swing.JTextArea();
        txtChannelPassword = new javax.swing.JPasswordField();
        popupChannel = new javax.swing.JPopupMenu();
        popupitemConnect = new javax.swing.JMenuItem();
        popupitemCreate = new javax.swing.JMenuItem();
        popupitemEdit = new javax.swing.JMenuItem();
        popupitemDelete = new javax.swing.JMenuItem();
        popupClient = new javax.swing.JPopupMenu();
        popupitemKick = new javax.swing.JMenuItem();
        popupitemAddFriend = new javax.swing.JMenuItem();
        filePopupMenu = new javax.swing.JPopupMenu();
        downloadItem = new javax.swing.JMenuItem();
        removeItem = new javax.swing.JMenuItem();
        newFolderItem = new javax.swing.JMenuItem();
        emojiPanel = new javax.swing.JDialog();
        happyBtn = new javax.swing.JButton();
        happy2Btn = new javax.swing.JButton();
        angryBtn = new javax.swing.JButton();
        inloveBtn = new javax.swing.JButton();
        illBtn = new javax.swing.JButton();
        silenceBtn = new javax.swing.JButton();
        sleepBtn = new javax.swing.JButton();
        cryBtn = new javax.swing.JButton();
        manBtn = new javax.swing.JButton();
        ninjaBtn = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        barbtnCreate = new javax.swing.JButton();
        barbtnEdit = new javax.swing.JButton();
        barbtnDelete = new javax.swing.JButton();
        barbtnConnect = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        barbtnMicEnable = new javax.swing.JToggleButton();
        barbtnVoiceEnable = new javax.swing.JToggleButton();
        underBar = new javax.swing.JPanel();
        splitPanel1 = new javax.swing.JSplitPane();
        splitPanel2 = new javax.swing.JSplitPane();
        roomInfoPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInfo = new javax.swing.JTextArea();
        roomPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listChannel = new javax.swing.JList<>();
        chat_msgPanel = new javax.swing.JPanel();
        msgPanel = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtConsole = new javax.swing.JTextArea();
        serverMsgPanel = new javax.swing.JPanel();
        channelMsgPanel = new javax.swing.JPanel();
        scrollpaneChat = new javax.swing.JScrollPane();
        txtChannelMsg = new javax.swing.JTextPane();
        chatPanel = new javax.swing.JPanel();
        emojiBtn = new javax.swing.JButton();
        textFieldChat = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        itemConnect = new javax.swing.JMenuItem();
        itemCreate = new javax.swing.JMenuItem();
        itemEditChannel = new javax.swing.JMenuItem();
        itemDeleteChannel = new javax.swing.JMenuItem();
        itemMicEnable = new javax.swing.JCheckBoxMenuItem();
        itemVoiceEnable = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        itemShowFriendFrm = new javax.swing.JCheckBoxMenuItem();
        itemAddFriend = new javax.swing.JMenuItem();
        itemRemoveFriend = new javax.swing.JMenuItem();
        itemInvite = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        fileTransferItem = new javax.swing.JMenuItem();

        dlgCreate.setTitle("Create Channel");
        dlgCreate.setIconImage(new ImageIcon("img/plus.png").getImage());
        dlgCreate.setResizable(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_chat.png"))); // NOI18N
        jLabel1.setText("Name");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_chat.png"))); // NOI18N
        jLabel2.setText("Password");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_chat.png"))); // NOI18N
        jLabel3.setText("Topic");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_chat.png"))); // NOI18N
        jLabel4.setText("Description");

        txtDesc.setColumns(20);
        txtDesc.setRows(5);
        jScrollPane3.setViewportView(txtDesc);

        javax.swing.GroupLayout dlgCreateLayout = new javax.swing.GroupLayout(dlgCreate.getContentPane());
        dlgCreate.getContentPane().setLayout(dlgCreateLayout);
        dlgCreateLayout.setHorizontalGroup(
            dlgCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgCreateLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(dlgCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(35, 35, 35)
                .addGroup(dlgCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtName)
                    .addComponent(txtTopic)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addComponent(txtPassword))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        dlgCreateLayout.setVerticalGroup(
            dlgCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgCreateLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(dlgCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dlgCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dlgCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dlgCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        transferPanel.setResizable(false);
        transferPanel.setSize(new java.awt.Dimension(400, 300));

        fileDownload.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        uploadBtn.setText("Upload");
        uploadBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                uploadBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("File Name:");

        fileUpload.setText("no file selected");

        browseBtn.setText("Browse");
        browseBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileDownloadLayout = new javax.swing.GroupLayout(fileDownload);
        fileDownload.setLayout(fileDownloadLayout);
        fileDownloadLayout.setHorizontalGroup(
            fileDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileDownloadLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(fileDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(browseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(uploadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(fileUpload)
                .addContainerGap(143, Short.MAX_VALUE))
        );
        fileDownloadLayout.setVerticalGroup(
            fileDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileDownloadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uploadBtn)
                    .addComponent(jLabel5)
                    .addComponent(fileUpload))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(browseBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Type", "Name", "Size (Byte)"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Object.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        fileTbl.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                fileTblMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(fileTbl);
        if (fileTbl.getColumnModel().getColumnCount() > 0)
        {
            fileTbl.getColumnModel().getColumn(0).setMinWidth(30);
            fileTbl.getColumnModel().getColumn(0).setPreferredWidth(40);
            fileTbl.getColumnModel().getColumn(0).setMaxWidth(60);
            fileTbl.getColumnModel().getColumn(1).setResizable(false);
            fileTbl.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout transferPanelLayout = new javax.swing.GroupLayout(transferPanel.getContentPane());
        transferPanel.getContentPane().setLayout(transferPanelLayout);
        transferPanelLayout.setHorizontalGroup(
            transferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        transferPanelLayout.setVerticalGroup(
            transferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(transferPanelLayout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileDownload, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        dlgEditChannel.setTitle("Create Channel");
        dlgEditChannel.setIconImage(new ImageIcon("img/plus.png").getImage());
        dlgEditChannel.setResizable(false);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_chat.png"))); // NOI18N
        jLabel9.setText("Name");

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_chat.png"))); // NOI18N
        jLabel10.setText("Password");

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_chat.png"))); // NOI18N
        jLabel11.setText("Topic");

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_chat.png"))); // NOI18N
        jLabel12.setText("Description");

        txtChannelDesc.setColumns(20);
        txtChannelDesc.setRows(5);
        jScrollPane6.setViewportView(txtChannelDesc);

        javax.swing.GroupLayout dlgEditChannelLayout = new javax.swing.GroupLayout(dlgEditChannel.getContentPane());
        dlgEditChannel.getContentPane().setLayout(dlgEditChannelLayout);
        dlgEditChannelLayout.setHorizontalGroup(
            dlgEditChannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgEditChannelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(dlgEditChannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(35, 35, 35)
                .addGroup(dlgEditChannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtChannelName)
                    .addComponent(txtChannelTopic)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addComponent(txtChannelPassword))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        dlgEditChannelLayout.setVerticalGroup(
            dlgEditChannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgEditChannelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(dlgEditChannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtChannelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dlgEditChannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtChannelPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dlgEditChannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtChannelTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dlgEditChannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        popupitemConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_switch.png"))); // NOI18N
        popupitemConnect.setText("Connect to channel");
        popupitemConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                popupitemConnectActionPerformed(evt);
            }
        });
        popupChannel.add(popupitemConnect);

        popupitemCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_create.png"))); // NOI18N
        popupitemCreate.setText("Create new channel");
        popupitemCreate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                popupitemCreateActionPerformed(evt);
            }
        });
        popupChannel.add(popupitemCreate);

        popupitemEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_edit.png"))); // NOI18N
        popupitemEdit.setText("Edit channel");
        popupitemEdit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                popupitemEditActionPerformed(evt);
            }
        });
        popupChannel.add(popupitemEdit);

        popupitemDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_remove_friend.png"))); // NOI18N
        popupitemDelete.setText("Delete channel");
        popupitemDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                popupitemDeleteActionPerformed(evt);
            }
        });
        popupChannel.add(popupitemDelete);

        popupitemKick.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_remove_foe.png"))); // NOI18N
        popupitemKick.setText("Kick from channel");
        popupitemKick.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                popupitemKickActionPerformed(evt);
            }
        });
        popupClient.add(popupitemKick);

        popupitemAddFriend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_add_friend.png"))); // NOI18N
        popupitemAddFriend.setText("Add as friend");
        popupitemAddFriend.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                popupitemAddFriendActionPerformed(evt);
            }
        });
        popupClient.add(popupitemAddFriend);

        downloadItem.setText("Download");
        downloadItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                downloadItemActionPerformed(evt);
            }
        });
        filePopupMenu.add(downloadItem);

        removeItem.setText("remove");
        removeItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                removeItemActionPerformed(evt);
            }
        });
        filePopupMenu.add(removeItem);

        newFolderItem.setText("New folder");
        newFolderItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newFolderItemActionPerformed(evt);
            }
        });
        filePopupMenu.add(newFolderItem);

        emojiPanel.setBackground(new java.awt.Color(51, 255, 255));
        emojiPanel.setUndecorated(true);
        emojiPanel.setResizable(false);
        emojiPanel.setSize(new java.awt.Dimension(200, 100));
        emojiPanel.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                emojiPanelFocusLost(evt);
            }
        });
        emojiPanel.getContentPane().setLayout(new java.awt.GridLayout(2, 5));

        happyBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/happy.png"))); // NOI18N
        happyBtn.setToolTipText(":)");
        happyBtn.setBorder(null);
        happyBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                happyBtnActionPerformed(evt);
            }
        });
        emojiPanel.getContentPane().add(happyBtn);

        happy2Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/happy2.png"))); // NOI18N
        happy2Btn.setToolTipText(":D");
        happy2Btn.setBorder(null);
        happy2Btn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                happy2BtnActionPerformed(evt);
            }
        });
        emojiPanel.getContentPane().add(happy2Btn);

        angryBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/angry2.png"))); // NOI18N
        angryBtn.setToolTipText(":C ");
        angryBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                angryBtnActionPerformed(evt);
            }
        });
        emojiPanel.getContentPane().add(angryBtn);

        inloveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/inlove.png"))); // NOI18N
        inloveBtn.setToolTipText(":x");
        inloveBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                inloveBtnActionPerformed(evt);
            }
        });
        emojiPanel.getContentPane().add(inloveBtn);

        illBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/ill.png"))); // NOI18N
        illBtn.setToolTipText(":-&");
        illBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                illBtnActionPerformed(evt);
            }
        });
        emojiPanel.getContentPane().add(illBtn);

        silenceBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/quiet.png"))); // NOI18N
        silenceBtn.setToolTipText(":q");
        silenceBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                silenceBtnActionPerformed(evt);
            }
        });
        emojiPanel.getContentPane().add(silenceBtn);

        sleepBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/sleep.png"))); // NOI18N
        sleepBtn.setToolTipText(":s");
        sleepBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sleepBtnActionPerformed(evt);
            }
        });
        emojiPanel.getContentPane().add(sleepBtn);

        cryBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/unhappy.png"))); // NOI18N
        cryBtn.setToolTipText(":-s");
        cryBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cryBtnActionPerformed(evt);
            }
        });
        emojiPanel.getContentPane().add(cryBtn);

        manBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/man.png"))); // NOI18N
        manBtn.setToolTipText(":-$");
        manBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                manBtnActionPerformed(evt);
            }
        });
        emojiPanel.getContentPane().add(manBtn);

        ninjaBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/ninja.png"))); // NOI18N
        ninjaBtn.setToolTipText(":-@");
        ninjaBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ninjaBtnActionPerformed(evt);
            }
        });
        emojiPanel.getContentPane().add(ninjaBtn);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentMoved(java.awt.event.ComponentEvent evt)
            {
                formComponentMoved(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(1, 1));

        jToolBar1.setRollover(true);

        barbtnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/24x24_channel_create.png"))); // NOI18N
        barbtnCreate.setText("Create channel");
        barbtnCreate.setFocusable(false);
        barbtnCreate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        barbtnCreate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barbtnCreate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                barbtnCreateActionPerformed(evt);
            }
        });
        jToolBar1.add(barbtnCreate);

        barbtnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/24x24_channel_create_sub.png"))); // NOI18N
        barbtnEdit.setText("Edit channel");
        barbtnEdit.setFocusable(false);
        barbtnEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        barbtnEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barbtnEdit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                barbtnEditActionPerformed(evt);
            }
        });
        jToolBar1.add(barbtnEdit);

        barbtnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/24x24_channel_delete.png"))); // NOI18N
        barbtnDelete.setText("Delete channel");
        barbtnDelete.setFocusable(false);
        barbtnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        barbtnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barbtnDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                barbtnDeleteActionPerformed(evt);
            }
        });
        jToolBar1.add(barbtnDelete);

        barbtnConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/24x24_connect.png"))); // NOI18N
        barbtnConnect.setText("Connect to channel");
        barbtnConnect.setFocusable(false);
        barbtnConnect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        barbtnConnect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barbtnConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                barbtnConnectActionPerformed(evt);
            }
        });
        jToolBar1.add(barbtnConnect);
        jToolBar1.add(jSeparator1);

        barbtnMicEnable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/24x24_input_muted.png"))); // NOI18N
        barbtnMicEnable.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/24x24_activate_microphone.png"))); // NOI18N
        barbtnMicEnable.setSelected(true);
        barbtnMicEnable.setText("Microphone");
        barbtnMicEnable.setFocusable(false);
        barbtnMicEnable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        barbtnMicEnable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barbtnMicEnable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                barbtnMicEnableActionPerformed(evt);
            }
        });
        jToolBar1.add(barbtnMicEnable);

        barbtnVoiceEnable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/24x24_output_muted.png"))); // NOI18N
        barbtnVoiceEnable.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/24x24_playback.png"))); // NOI18N
        barbtnVoiceEnable.setSelected(true);
        barbtnVoiceEnable.setText("Sound");
        barbtnVoiceEnable.setFocusable(false);
        barbtnVoiceEnable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        barbtnVoiceEnable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barbtnVoiceEnable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                barbtnVoiceEnableActionPerformed(evt);
            }
        });
        jToolBar1.add(barbtnVoiceEnable);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        underBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        underBar.setPreferredSize(new java.awt.Dimension(673, 25));

        javax.swing.GroupLayout underBarLayout = new javax.swing.GroupLayout(underBar);
        underBar.setLayout(underBarLayout);
        underBarLayout.setHorizontalGroup(
            underBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        underBarLayout.setVerticalGroup(
            underBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        getContentPane().add(underBar, java.awt.BorderLayout.PAGE_END);

        splitPanel1.setDividerLocation(250);
        splitPanel1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        splitPanel2.setDividerLocation(250);
        splitPanel2.setPreferredSize(new java.awt.Dimension(671, 300));

        roomInfoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        roomInfoPanel.setPreferredSize(new java.awt.Dimension(300, 250));

        txtInfo.setEditable(false);
        txtInfo.setColumns(20);
        txtInfo.setRows(5);
        jScrollPane1.setViewportView(txtInfo);

        javax.swing.GroupLayout roomInfoPanelLayout = new javax.swing.GroupLayout(roomInfoPanel);
        roomInfoPanel.setLayout(roomInfoPanelLayout);
        roomInfoPanelLayout.setHorizontalGroup(
            roomInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
        );
        roomInfoPanelLayout.setVerticalGroup(
            roomInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
        );

        splitPanel2.setRightComponent(roomInfoPanel);

        roomPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        roomPanel.setPreferredSize(new java.awt.Dimension(350, 250));

        listChannel.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listChannel.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                listChannelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                listChannelMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(listChannel);

        javax.swing.GroupLayout roomPanelLayout = new javax.swing.GroupLayout(roomPanel);
        roomPanel.setLayout(roomPanelLayout);
        roomPanelLayout.setHorizontalGroup(
            roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
        );
        roomPanelLayout.setVerticalGroup(
            roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
        );

        splitPanel2.setLeftComponent(roomPanel);

        splitPanel1.setTopComponent(splitPanel2);

        chat_msgPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        chat_msgPanel.setPreferredSize(new java.awt.Dimension(671, 150));
        chat_msgPanel.setLayout(new javax.swing.BoxLayout(chat_msgPanel, javax.swing.BoxLayout.Y_AXIS));

        msgPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        msgPanel.setPreferredSize(new java.awt.Dimension(100, 230));

        txtConsole.setColumns(20);
        txtConsole.setRows(5);
        jScrollPane2.setViewportView(txtConsole);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );

        msgPanel.addTab("Console", jPanel2);

        serverMsgPanel.setMinimumSize(new java.awt.Dimension(100, 0));
        serverMsgPanel.setPreferredSize(new java.awt.Dimension(485, 260));

        javax.swing.GroupLayout serverMsgPanelLayout = new javax.swing.GroupLayout(serverMsgPanel);
        serverMsgPanel.setLayout(serverMsgPanelLayout);
        serverMsgPanelLayout.setHorizontalGroup(
            serverMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 485, Short.MAX_VALUE)
        );
        serverMsgPanelLayout.setVerticalGroup(
            serverMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 209, Short.MAX_VALUE)
        );

        msgPanel.addTab("Server", serverMsgPanel);

        txtChannelMsg.setEditable(false);
        txtChannelMsg.setContentType("text/html\n"); // NOI18N
        txtChannelMsg.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        scrollpaneChat.setViewportView(txtChannelMsg);

        javax.swing.GroupLayout channelMsgPanelLayout = new javax.swing.GroupLayout(channelMsgPanel);
        channelMsgPanel.setLayout(channelMsgPanelLayout);
        channelMsgPanelLayout.setHorizontalGroup(
            channelMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollpaneChat, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
        );
        channelMsgPanelLayout.setVerticalGroup(
            channelMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollpaneChat, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );

        msgPanel.addTab("Channel", channelMsgPanel);

        chat_msgPanel.add(msgPanel);

        chatPanel.setMaximumSize(new java.awt.Dimension(2147483647, 50));
        chatPanel.setMinimumSize(new java.awt.Dimension(0, 20));
        chatPanel.setName(""); // NOI18N
        chatPanel.setPreferredSize(new java.awt.Dimension(494, 50));
        chatPanel.setLayout(new java.awt.BorderLayout());

        emojiBtn.setBackground(new java.awt.Color(255, 255, 255));
        emojiBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emoji/happy.png"))); // NOI18N
        emojiBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        emojiBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                emojiBtnActionPerformed(evt);
            }
        });
        chatPanel.add(emojiBtn, java.awt.BorderLayout.LINE_END);

        textFieldChat.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                textFieldChatKeyPressed(evt);
            }
        });
        chatPanel.add(textFieldChat, java.awt.BorderLayout.CENTER);

        chat_msgPanel.add(chatPanel);

        splitPanel1.setRightComponent(chat_msgPanel);

        getContentPane().add(splitPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Channel");

        itemConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_switch.png"))); // NOI18N
        itemConnect.setText("Connect to channel");
        itemConnect.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemConnectActionPerformed(evt);
            }
        });
        jMenu1.add(itemConnect);

        itemCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_create.png"))); // NOI18N
        itemCreate.setText("Create new channel");
        itemCreate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemCreateActionPerformed(evt);
            }
        });
        jMenu1.add(itemCreate);

        itemEditChannel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_edit.png"))); // NOI18N
        itemEditChannel.setText("Edit channel");
        itemEditChannel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemEditChannelActionPerformed(evt);
            }
        });
        jMenu1.add(itemEditChannel);

        itemDeleteChannel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_channel_delete.png"))); // NOI18N
        itemDeleteChannel.setText("Delete channel");
        itemDeleteChannel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemDeleteChannelActionPerformed(evt);
            }
        });
        jMenu1.add(itemDeleteChannel);

        itemMicEnable.setSelected(true);
        itemMicEnable.setText("Enable microphone");
        itemMicEnable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemMicEnableActionPerformed(evt);
            }
        });
        jMenu1.add(itemMicEnable);

        itemVoiceEnable.setSelected(true);
        itemVoiceEnable.setText("Enable incoming voice");
        itemVoiceEnable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemVoiceEnableActionPerformed(evt);
            }
        });
        jMenu1.add(itemVoiceEnable);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Friend");

        itemShowFriendFrm.setSelected(true);
        itemShowFriendFrm.setText("Show Friend panel");
        itemShowFriendFrm.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemShowFriendFrmActionPerformed(evt);
            }
        });
        jMenu3.add(itemShowFriendFrm);

        itemAddFriend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_add_friend.png"))); // NOI18N
        itemAddFriend.setText("Add as friend");
        itemAddFriend.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemAddFriendActionPerformed(evt);
            }
        });
        jMenu3.add(itemAddFriend);

        itemRemoveFriend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_remove_friend.png"))); // NOI18N
        itemRemoveFriend.setText("Remove friend");
        itemRemoveFriend.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemRemoveFriendActionPerformed(evt);
            }
        });
        jMenu3.add(itemRemoveFriend);

        itemInvite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16_new_chat.png"))); // NOI18N
        itemInvite.setText("Invite to channel");
        itemInvite.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemInviteActionPerformed(evt);
            }
        });
        jMenu3.add(itemInvite);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Tool");

        fileTransferItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ftransfer.png"))); // NOI18N
        fileTransferItem.setText("File Transfer");
        fileTransferItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fileTransferItemActionPerformed(evt);
            }
        });
        jMenu2.add(fileTransferItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listChannelMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_listChannelMouseClicked
    {//GEN-HEADEREND:event_listChannelMouseClicked
        cmc.ChannelListClicked(evt);
    }//GEN-LAST:event_listChannelMouseClicked

    private void itemConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemConnectActionPerformed
    {//GEN-HEADEREND:event_itemConnectActionPerformed
        cmc.itemConnectClicked();
    }//GEN-LAST:event_itemConnectActionPerformed

    private void itemCreateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemCreateActionPerformed
    {//GEN-HEADEREND:event_itemCreateActionPerformed
        cmc.itemCreateClicked();
    }//GEN-LAST:event_itemCreateActionPerformed

    private void fileTransferItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTransferItemActionPerformed
        listFileInServer();
    }//GEN-LAST:event_fileTransferItemActionPerformed

    private void uploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadBtnActionPerformed
        uploadClick();
    }//GEN-LAST:event_uploadBtnActionPerformed

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        browseClick();
    }//GEN-LAST:event_browseBtnActionPerformed


    private void itemEditChannelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemEditChannelActionPerformed
    {//GEN-HEADEREND:event_itemEditChannelActionPerformed
        cmc.itemEditChannelClicked();
    }//GEN-LAST:event_itemEditChannelActionPerformed
    
    private void itemAddFriendActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemAddFriendActionPerformed
    {//GEN-HEADEREND:event_itemAddFriendActionPerformed
        cff.cfc.itemAddFriendClicked();
    }//GEN-LAST:event_itemAddFriendActionPerformed

    private void itemRemoveFriendActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemRemoveFriendActionPerformed
    {//GEN-HEADEREND:event_itemRemoveFriendActionPerformed
        cff.cfc.itemRemoveFriendClicked();
    }//GEN-LAST:event_itemRemoveFriendActionPerformed

    private void itemInviteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemInviteActionPerformed
    {//GEN-HEADEREND:event_itemInviteActionPerformed
        cff.cfc.itemInviteClicked();
    }//GEN-LAST:event_itemInviteActionPerformed

    private void itemDeleteChannelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemDeleteChannelActionPerformed
    {//GEN-HEADEREND:event_itemDeleteChannelActionPerformed
        cmc.itemDeleteChannelClicked();
    }//GEN-LAST:event_itemDeleteChannelActionPerformed

    private void popupitemConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_popupitemConnectActionPerformed
    {//GEN-HEADEREND:event_popupitemConnectActionPerformed
        cmc.itemConnectClicked();
    }//GEN-LAST:event_popupitemConnectActionPerformed

    private void listChannelMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_listChannelMousePressed
    {//GEN-HEADEREND:event_listChannelMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_listChannelMousePressed

    private void popupitemEditActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_popupitemEditActionPerformed
    {//GEN-HEADEREND:event_popupitemEditActionPerformed
        cmc.itemEditChannelClicked();
    }//GEN-LAST:event_popupitemEditActionPerformed

    private void popupitemDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_popupitemDeleteActionPerformed
    {//GEN-HEADEREND:event_popupitemDeleteActionPerformed
        cmc.itemDeleteChannelClicked();
    }//GEN-LAST:event_popupitemDeleteActionPerformed

    private void popupitemCreateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_popupitemCreateActionPerformed
    {//GEN-HEADEREND:event_popupitemCreateActionPerformed
        cmc.itemCreateClicked();
    }//GEN-LAST:event_popupitemCreateActionPerformed

    private void popupitemKickActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_popupitemKickActionPerformed
    {//GEN-HEADEREND:event_popupitemKickActionPerformed
        cmc.itemKickClicked();
    }//GEN-LAST:event_popupitemKickActionPerformed

    private void fileTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileTblMouseClicked
        if (evt.getClickCount() == 2){
            changeDirectory();
        }
        if (SwingUtilities.isRightMouseButton(evt)){            
            int r = fileTbl.rowAtPoint(evt.getPoint());
            if (r != 0){
                downloadItem.setEnabled(true);
                removeItem.setEnabled(true);
                fileTbl.setRowSelectionInterval(r, r);
                filePopupMenu.show(fileTbl, evt.getPoint().x, evt.getPoint().y);
            }
            else{
                downloadItem.setEnabled(false);
                removeItem.setEnabled(false);
                fileTbl.setRowSelectionInterval(r, r);
                filePopupMenu.show(fileTbl, evt.getPoint().x, evt.getPoint().y);
            }
        }
    }//GEN-LAST:event_fileTblMouseClicked

    private void downloadItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadItemActionPerformed
        downloadClick();
    }//GEN-LAST:event_downloadItemActionPerformed

    private void removeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemActionPerformed
        removeClick();
    }//GEN-LAST:event_removeItemActionPerformed

    private void newFolderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFolderItemActionPerformed
        newFolderClick();
    }//GEN-LAST:event_newFolderItemActionPerformed

    private void emojiBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emojiBtnActionPerformed
        Point btnPoint = emojiBtn.getLocationOnScreen();
        emojiPanel.setLocation(new Point(btnPoint.x + 30, btnPoint.y - 100));
        showEmojiDialog();        
    }//GEN-LAST:event_emojiBtnActionPerformed

    private void happyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_happyBtnActionPerformed
        emojiPanel.hide();        
        String msg = textFieldChat.getText();
        textFieldChat.setText(msg + ":)");
        textFieldChat.requestFocus();
    }//GEN-LAST:event_happyBtnActionPerformed

    private void happy2BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_happy2BtnActionPerformed
        emojiPanel.hide();
        String msg = textFieldChat.getText();
        textFieldChat.setText(msg + ":D");
        textFieldChat.requestFocus();
    }//GEN-LAST:event_happy2BtnActionPerformed

    private void angryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_angryBtnActionPerformed
        emojiPanel.hide();
        String msg = textFieldChat.getText();
        textFieldChat.setText(msg + ":C");
        textFieldChat.requestFocus();
    }//GEN-LAST:event_angryBtnActionPerformed

    private void inloveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inloveBtnActionPerformed
        emojiPanel.hide();
        String msg = textFieldChat.getText();
        textFieldChat.setText(msg + ":x");
        textFieldChat.requestFocus();
    }//GEN-LAST:event_inloveBtnActionPerformed

    private void illBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_illBtnActionPerformed
        emojiPanel.hide();
        String msg = textFieldChat.getText();
        textFieldChat.setText(msg + ":-&");
        textFieldChat.requestFocus();
    }//GEN-LAST:event_illBtnActionPerformed

    private void silenceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_silenceBtnActionPerformed
        emojiPanel.hide();
        String msg = textFieldChat.getText();
        textFieldChat.setText(msg + ":q");
        textFieldChat.requestFocus();
    }//GEN-LAST:event_silenceBtnActionPerformed

    private void sleepBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sleepBtnActionPerformed
        emojiPanel.hide();
        String msg = textFieldChat.getText();
        textFieldChat.setText(msg + ":s");
        textFieldChat.requestFocus();
    }//GEN-LAST:event_sleepBtnActionPerformed

    private void cryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cryBtnActionPerformed
        emojiPanel.hide();
        String msg = textFieldChat.getText();
        textFieldChat.setText(msg + ":-s");
        textFieldChat.requestFocus();
    }//GEN-LAST:event_cryBtnActionPerformed

    private void manBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manBtnActionPerformed
        emojiPanel.hide();
        String msg = textFieldChat.getText();
        textFieldChat.setText(msg + ":-$");
        textFieldChat.requestFocus();
    }//GEN-LAST:event_manBtnActionPerformed

    private void ninjaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ninjaBtnActionPerformed
        emojiPanel.hide();
        String msg = textFieldChat.getText();
        textFieldChat.setText(msg + ":-@");
        textFieldChat.requestFocus();
    }//GEN-LAST:event_ninjaBtnActionPerformed

    private void emojiPanelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emojiPanelFocusLost
        emojiPanel.hide();
        textFieldChat.requestFocus();
    }//GEN-LAST:event_emojiPanelFocusLost

    private void textFieldChatKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldChatKeyPressed
        if (evt.getKeyCode() == 10){
            String msg = textFieldChat.getText();
            if(!msg.isEmpty())
                cmc.sendMsg(msg);
            textFieldChat.setText("");
        }
    }//GEN-LAST:event_textFieldChatKeyPressed

    private void popupitemAddFriendActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_popupitemAddFriendActionPerformed
    {//GEN-HEADEREND:event_popupitemAddFriendActionPerformed
        cff.cfc.itemAddFriendClicked();
    }//GEN-LAST:event_popupitemAddFriendActionPerformed

    private void itemShowFriendFrmActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemShowFriendFrmActionPerformed
    {//GEN-HEADEREND:event_itemShowFriendFrmActionPerformed
        if(itemShowFriendFrm.isSelected())
        {
            cff.setVisible(true);
        }
        else
            cff.setVisible(false);
    }//GEN-LAST:event_itemShowFriendFrmActionPerformed

    private void formComponentMoved(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentMoved
    {//GEN-HEADEREND:event_formComponentMoved
        setFriendFrmPosition();
    }//GEN-LAST:event_formComponentMoved

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        cmc.disconnect();
    }//GEN-LAST:event_formWindowClosing

    private void barbtnCreateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_barbtnCreateActionPerformed
    {//GEN-HEADEREND:event_barbtnCreateActionPerformed
        cmc.itemCreateClicked();
    }//GEN-LAST:event_barbtnCreateActionPerformed

    private void barbtnEditActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_barbtnEditActionPerformed
    {//GEN-HEADEREND:event_barbtnEditActionPerformed
        cmc.itemEditChannelClicked();
    }//GEN-LAST:event_barbtnEditActionPerformed

    private void barbtnDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_barbtnDeleteActionPerformed
    {//GEN-HEADEREND:event_barbtnDeleteActionPerformed
        cmc.itemDeleteChannelClicked();
    }//GEN-LAST:event_barbtnDeleteActionPerformed

    private void barbtnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_barbtnConnectActionPerformed
    {//GEN-HEADEREND:event_barbtnConnectActionPerformed
        cmc.itemConnectClicked();
    }//GEN-LAST:event_barbtnConnectActionPerformed

    private void barbtnMicEnableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_barbtnMicEnableActionPerformed
    {//GEN-HEADEREND:event_barbtnMicEnableActionPerformed
        if(barbtnMicEnable.isSelected())
            itemMicEnable.setSelected(true);
        else
            itemMicEnable.setSelected(false);
    }//GEN-LAST:event_barbtnMicEnableActionPerformed

    private void barbtnVoiceEnableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_barbtnVoiceEnableActionPerformed
    {//GEN-HEADEREND:event_barbtnVoiceEnableActionPerformed
        if(barbtnVoiceEnable.isSelected())
            itemVoiceEnable.setSelected(true);
        else
            itemVoiceEnable.setSelected(false);
    }//GEN-LAST:event_barbtnVoiceEnableActionPerformed

    private void itemMicEnableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemMicEnableActionPerformed
    {//GEN-HEADEREND:event_itemMicEnableActionPerformed
        if(itemMicEnable.isSelected())
            barbtnMicEnable.setSelected(true);
        else
            barbtnMicEnable.setSelected(false);
    }//GEN-LAST:event_itemMicEnableActionPerformed

    private void itemVoiceEnableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemVoiceEnableActionPerformed
    {//GEN-HEADEREND:event_itemVoiceEnableActionPerformed
        if(itemVoiceEnable.isSelected())
            barbtnVoiceEnable.setSelected(true);
        else
            barbtnVoiceEnable.setSelected(false);
    }//GEN-LAST:event_itemVoiceEnableActionPerformed


    /**
     * This function update the channel list
     */
    public void updateChannelList(ArrayList<Channel> list)
    {
        DefaultListModel dlm = new DefaultListModel();
        for(Channel channel : list)
        {
            dlm.addElement(channel.getName());
            for(Client client : channel.getListClient())
            {
                dlm.addElement("    " + client.getUsername());
                if(client.getUsername().equals(cmc.user.getUsername()))
                    cmc.currentChannel.setName(channel.getName());
            }
        }
        listChannel.setModel(dlm);
        writeConsole("updated");
    }
    
    /**
     * This function set up the message panel for the channel
     */
    public void setMsgPanel()
    {
        if(channelMsgPanel.getParent() != msgPanel)
            msgPanel.add(channelMsgPanel);
        txtChannelMsg.setContentType("text/html");
        msgPanel.setTitleAt(2, cmc.currentChannel.getName());
        msgPanel.setSelectedIndex(2);
    }
    
    /**
     * This function shows a create channel dialog and return the result
     */
    public Channel showCreateChannelDialog()
    {
        Channel channel = null;
        String[] options = {
            "Create",
            "Cancel"
        };
        txtName.setText("");
        txtPassword.setText("");
        txtTopic.setText("");
        txtDesc.setText("");
        int option = JOptionPane.showOptionDialog(this, dlgCreate.getRootPane(), "Create channel", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        if(option == 0)
        {
            channel = new Channel();
            channel.setName(txtName.getText());
            channel.setPassword(new String(txtPassword.getPassword()));
            channel.setTopic(txtTopic.getText());
            channel.setDescription(txtDesc.getText());
        }
        return channel;
    }
    
    /**
     * this function shows a edit channel dialog and return the result
     */
    public Channel showEditChannelDialog(Channel channel)
    {
        Channel result = null;
        String[] options = {
            "Edit",
            "Cancel"
        };
        txtChannelName.setText(channel.getName());
        txtChannelPassword.setText(channel.getPassword());
        txtChannelTopic.setText(channel.getTopic());
        txtChannelDesc.setText(channel.getDescription());
        int option = JOptionPane.showOptionDialog(this, dlgEditChannel.getRootPane(), "Create channel", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        if(option == 0)
        {
            //check difference
            if(txtChannelName.getText().equals(channel.getName()) && txtChannelTopic.getText().equals(channel.getTopic()) && txtChannelDesc.getText().equals(channel.getDescription()) && new String(txtPassword.getPassword()).equals(channel.getPassword()))
                return null;
            //check if channel name and password are empty
            if(txtChannelName.equals("") || txtChannelPassword.equals(""))
            {
                JOptionPane.showMessageDialog(this, "Channel name or password is empty!", "Error", JOptionPane.ERROR_MESSAGE);
                return showEditChannelDialog(channel);
            }
            //save new channel info
            result = new Channel();
            result.setName(txtChannelName.getText());
            result.setPassword(new String(txtChannelPassword.getPassword()));
            result.setTopic(txtChannelTopic.getText());
            result.setDescription(txtChannelDesc.getText());
            return result;
        }
        return null;
    }
    
    /**
     * This function shows the friend request dialog
     */
    public int showFriendRequest(String senderName)
    {
        String[] options = 
        {
            "Accept",
            "Decline"
        };
        int option = JOptionPane.showOptionDialog(this, senderName + " has sent you a friend request", "Friend request", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        if(option == 0)
            return 1;
        else
            return 0;
    }
    
    /**
     * This function shows the invite request
     */
    public boolean showInviteRequest(String sender, String channelName)
    {
        String[] options = 
        {
            "Accept",
            "Decline"
        };
        int option = JOptionPane.showOptionDialog(this, sender + " invite you to join channel " + channelName, "Invitation", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        if(option == 0)
            return true;
        else
            return false;
    }
    
    /**
     * This function shows the channel popup menu
     */
    public void showChannelPopupMenu(Point p)
    {
        this.popupChannel.show(listChannel, listChannel.getX() + p.x, listChannel.getY() + p.y);
    }
    
    /**
     * This function shows the channel popup menu
     */
    public void showClientPopupMenu(Point p)
    {
        this.popupClient.show(listChannel, listChannel.getX() + p.x, listChannel.getY() + p.y);
    }
    
    /**
     * This function enable/disable all item related to channel
     */
    public void setChannelItem(boolean isEnabled)
    {
        this.itemConnect.setEnabled(isEnabled);
        this.itemDeleteChannel.setEnabled(isEnabled);
        this.itemEditChannel.setEnabled(isEnabled);
        this.barbtnConnect.setEnabled(isEnabled);
        this.barbtnDelete.setEnabled(isEnabled);
        this.barbtnEdit.setEnabled(isEnabled);
    }
    
    /**
     * This function enable/disable all item related to friend
     */
    public void setFriendItem(boolean isEnabled)
    {
        this.itemAddFriend.setEnabled(isEnabled);
        this.itemRemoveFriend.setEnabled(isEnabled);
        this.itemInvite.setEnabled(isEnabled);
    }
    
    /**
     * This function returns currently selected channel
     */
    public String getSelectedChannel()
    {
        int index = listChannel.getSelectedIndex();
        if(index == -1)
            return null;
        else
        {
            String s = listChannel.getModel().getElementAt(index);
            if(s.substring(0, 4).equals("    "))
                return null;
            else
                return s;
        }
    }
    
    public String getSelectedClient()
    {
        int index = listChannel.getSelectedIndex();
        if(index == -1)
            return null;
        else
        {
            String s = listChannel.getModel().getElementAt(index);
            if(!s.substring(0, 4).equals("    "))
                return null;
            else
                return s.substring(4, s.length());
        }
    }
    
    /**
     * This function return the client's current channel
     */
    public String getUserChannel(String username)
    {
        String result = null;
        for(int i = 0; i < listChannel.getModel().getSize(); i++)
        {
            String s = listChannel.getModel().getElementAt(i);
            if(!s.substring(0, 4).equals("    "))
            {
                result = listChannel.getModel().getElementAt(i);
            }
            else
            {
                if(s.substring(4, s.length()).equals(username))
                    return result;
            }
        }
        return null;
    }
    
    /**
     * This function show a password dialog and return the password
     */
    public String getPassword()
    {
        JPanel panel = new JPanel();
        JLabel label = new JLabel("Enter channel's password:");
        JPasswordField jpf = new JPasswordField();
        jpf.setColumns(20);
        panel.add(label);
        panel.add(jpf);
        String[] options = new String[]
        {
            "OK", "Cancel"
        };
        int option = JOptionPane.showOptionDialog(null, panel, "Enter password", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[1]);
        if(option == 0)
        {
            char[] password = jpf.getPassword();
            return new String(password);
        }
        return null;
    }
    
    /**
     * This function prints chat message
     */
    
    private String replaceIcon(String input){        
        for(int i = 0; i < numberofemo; i++)
        {
            input = input.replaceAll(emoName[i], "<img src=\"" + emoAbspath[i] + "\"/>");
        }
        return input;
    }
    
    public void printMessage(String sender, String message)
    {        
        message = replaceIcon(message);
        String output = sender + " : " + message + "<br>";        
        HTMLDocument doc = (HTMLDocument) txtChannelMsg.getStyledDocument();
        try
        {
            doc.insertAfterEnd(doc.getCharacterElement(doc.getLength()),output);
            JScrollBar vertical = scrollpaneChat.getVerticalScrollBar();
            vertical.setValue(vertical.getMaximum());
        }
        catch(IOException |BadLocationException ex)
        {
            Logger.getLogger(ClientMainFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
        //txtChannelMsg.setText(txtChannelMsg.getText() + sender + ": " + message + "\n");        
                
    }
    
    /**
     * This function shows if user is enabling mic or not
     */
    public boolean isMicEnabled()
    {
        return itemMicEnable.isSelected();
    }
    
    /**
     * This function shows if user is enabling voice chat or not
     */
    public boolean isVoiceEnabled()
    {
        return itemVoiceEnable.isSelected();
    }
    
    /**
     * This function update the info panel
     */
    public void updateInfoPanel(Channel c)
    {
        txtInfo.setText("");
        writeInfo("Channel: " + c.getName());
        writeInfo("");
        writeInfo("Owner: " + c.getOwner().getUsername());
        writeInfo("Topic: " + c.getTopic());
        writeInfo("Description: ");
        writeInfo("     " + c.getDescription());
    }
    
    /**
     * This function update the info panel
     */
    public void updateInfoPanel(String clientName)
    {
        txtInfo.setText("");
        writeInfo("Client: " + clientName);
        writeInfo("Current status: In channel: " + getCurrentChannel(clientName));
    }
    
    /**
     * This function return the channel name of the client
     */
    public String getCurrentChannel(String clientName)
    {
        String result = null;
        for(int i = 0; i < listChannel.getModel().getSize(); i++)
        {
            String s = listChannel.getModel().getElementAt(i);
            if(!s.substring(0, 4).equals("    "))
            {
                result = s;
                continue;
            }
            if(clientName.equals(s.substring(4, s.length())))
                return result;
        }
        return result;
    }
    
    /**
     * This function set the position of friend frame on the right of this frame
     */
    private void setFriendFrmPosition()
    {
        if(cff != null)
            cff.setLocation(this.getLocation().x+this.getWidth(), this.getLocation().y);
    }
    
    /**
     * This function writes a new line in console
     */
    public void writeConsole(String s)
    {
        txtConsole.setText(txtConsole.getText() + s + "\n");
    }
    
    /**
     * This function writes a new line in info text area
     */
    public void writeInfo(String s)
    {
        txtInfo.setText(txtInfo.getText() + s + "\n");
    }
    
    private void showEmojiDialog(){
        emojiPanel.show();
        emojiPanel.setFocusable(true);
        
    }
    
    
    
    /*
    *   this function opens fileChooser and does file transfer
    */
    


    //FTP part
    private void listFileInServer(){
        transferPanel.setVisible(true);
        transferPanel.pack();                                         
        ArrayList<FtpFile> files = cfc.listFile();
                
        fileTblModel.setRowCount(0);
        Object[] firstRow = {"Folder", "..", ""};
        fileTblModel.addRow(firstRow);        
        if (!files.isEmpty()){
            for (int i = 0; i < files.size(); i++){
                //Object[] row = , files.get(i).getName(), files.get(i).getSize()};
                Object[] row = new Object[4];
                if (files.get(i).getType() == 1)
                    row[0] = "Folder";
                else
                    row[0] = "File";
                row[1] = files.get(i).getName();
                row[2] = files.get(i).getSize();
                fileTblModel.addRow(row);
            }            
        }                                                   
    }
    
    private void uploadClick(){
        String fileName = fileUpload.getText();
        if (!fileName.equals("no file selected")){            
            cfc.uploadFile(fileSelected);
            JFrame f = new JFrame();
            int replyCode = cfc.getReplyCode();
            System.out.println(cfc.getReplyString());
            if (replyCode == 226){
                JOptionPane.showMessageDialog(f, "Tranfer completed");
                fileUpload.setText("no file selected");
                
                //update table again
                listFileInServer();
            }
            else if (replyCode == 501){
                JOptionPane.showMessageDialog(f, "Invalid charater in file name");
                fileUpload.setText("no file selected");
            }
        }
        
    }
    
    private void downloadClick(){
        int rowSelected = fileTbl.getSelectedRow(); 
        if (rowSelected == -1)
            return;
        String fileName = (String) fileTblModel.getValueAt(rowSelected, 1);        
        String fileTypeStr = (String) fileTblModel.getValueAt(rowSelected, 0);
        int fileType = fileTypeStr.equals("Folder") ? 1: 0;
        long size = (long) fileTblModel.getValueAt(rowSelected, 2);
        FtpFile file = new FtpFile(fileName, size, fileType);
        boolean flag = cfc.downloadFile(file);
        if (flag == true){
            JOptionPane.showMessageDialog(this, "Download successfully");
        }
        else
            JOptionPane.showMessageDialog(this, "can not download");
    }
    
    private void newFolderClick(){
        boolean flag = false;
        String folderName = JOptionPane.showInputDialog(fileTbl, "Folder name?");
        if (folderName.equals(""))
            folderName = "New folder";
        flag = cfc.mkdir(folderName);
        if (flag == false)
            JOptionPane.showMessageDialog(fileTbl, "fail to create new folder");
        listFileInServer();
    }
    
    private void removeClick(){
        int rowSelected = fileTbl.getSelectedRow(); 
        if (rowSelected == -1)
            return;
        boolean flag = false;
        String fileName = (String) fileTblModel.getValueAt(rowSelected, 1);
        String fileType = (String) fileTblModel.getValueAt(rowSelected, 0);
        if (fileType.equals("File")){
            flag = cfc.removeFile(fileName);            
        }
        else{            
            flag = cfc.removeDirRecursive(fileName);
            flag = cfc.removeDir(fileName);
        }
        if (flag == false)
            JOptionPane.showMessageDialog(this, "can not remove");
        listFileInServer();
    }
    
    private void browseClick(){                
        int selection = fileChooser.showDialog(this, "Upload");        
        if (selection == JFileChooser.APPROVE_OPTION){
            fileSelected = fileChooser.getSelectedFile();
            fileUpload.setText(fileSelected.getName());            
        }                        
    }
    
    private void changeDirectory(){
        int row = fileTbl.getSelectedRow();
        if (row != -1){
            String fileType = (String) fileTblModel.getValueAt(row, 0);
            String fileName = (String) fileTblModel.getValueAt(row, 1);            
            if (fileType.equals("Folder")){                                                                
                cfc.changeDirectory(fileName);
                listFileInServer();
            }
                
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientMainFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientMainFrm(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton angryBtn;
    private javax.swing.JButton barbtnConnect;
    private javax.swing.JButton barbtnCreate;
    private javax.swing.JButton barbtnDelete;
    private javax.swing.JButton barbtnEdit;
    private javax.swing.JToggleButton barbtnMicEnable;
    private javax.swing.JToggleButton barbtnVoiceEnable;
    private javax.swing.JButton browseBtn;
    private javax.swing.JPanel channelMsgPanel;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JPanel chat_msgPanel;
    private javax.swing.JButton cryBtn;
    private javax.swing.JDialog dlgCreate;
    private javax.swing.JDialog dlgEditChannel;
    private javax.swing.JMenuItem downloadItem;
    private javax.swing.JButton emojiBtn;
    private javax.swing.JDialog emojiPanel;
    private javax.swing.JPanel fileDownload;
    private javax.swing.JPopupMenu filePopupMenu;
    private javax.swing.JTable fileTbl;
    private javax.swing.JMenuItem fileTransferItem;
    private javax.swing.JLabel fileUpload;
    private javax.swing.JButton happy2Btn;
    private javax.swing.JButton happyBtn;
    private javax.swing.JButton illBtn;
    private javax.swing.JButton inloveBtn;
    private javax.swing.JMenuItem itemAddFriend;
    private javax.swing.JMenuItem itemConnect;
    private javax.swing.JMenuItem itemCreate;
    private javax.swing.JMenuItem itemDeleteChannel;
    private javax.swing.JMenuItem itemEditChannel;
    private javax.swing.JMenuItem itemInvite;
    private javax.swing.JCheckBoxMenuItem itemMicEnable;
    private javax.swing.JMenuItem itemRemoveFriend;
    private javax.swing.JCheckBoxMenuItem itemShowFriendFrm;
    private javax.swing.JCheckBoxMenuItem itemVoiceEnable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    public javax.swing.JList<String> listChannel;
    private javax.swing.JButton manBtn;
    private javax.swing.JTabbedPane msgPanel;
    private javax.swing.JMenuItem newFolderItem;
    private javax.swing.JButton ninjaBtn;
    private javax.swing.JPopupMenu popupChannel;
    private javax.swing.JPopupMenu popupClient;
    private javax.swing.JMenuItem popupitemAddFriend;
    private javax.swing.JMenuItem popupitemConnect;
    private javax.swing.JMenuItem popupitemCreate;
    private javax.swing.JMenuItem popupitemDelete;
    private javax.swing.JMenuItem popupitemEdit;
    private javax.swing.JMenuItem popupitemKick;
    private javax.swing.JMenuItem removeItem;
    private javax.swing.JPanel roomInfoPanel;
    private javax.swing.JPanel roomPanel;
    private javax.swing.JScrollPane scrollpaneChat;
    private javax.swing.JPanel serverMsgPanel;
    private javax.swing.JButton silenceBtn;
    private javax.swing.JButton sleepBtn;
    private javax.swing.JSplitPane splitPanel1;
    private javax.swing.JSplitPane splitPanel2;
    private javax.swing.JTextField textFieldChat;
    private javax.swing.JDialog transferPanel;
    private javax.swing.JTextArea txtChannelDesc;
    private javax.swing.JTextPane txtChannelMsg;
    private javax.swing.JTextField txtChannelName;
    private javax.swing.JPasswordField txtChannelPassword;
    private javax.swing.JTextField txtChannelTopic;
    private javax.swing.JTextArea txtConsole;
    private javax.swing.JTextArea txtDesc;
    private javax.swing.JTextArea txtInfo;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtTopic;
    private javax.swing.JPanel underBar;
    private javax.swing.JButton uploadBtn;
    // End of variables declaration//GEN-END:variables

}
