/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Server;

import model.*;
import demo.Socket.ServerSocketDemo;
import java.io.*;
import java.io.IOException;
import java.net.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author xSzy
 */
public class Server extends javax.swing.JFrame
{
    //global variables
    private ArrayList<Client> listClient;
    private ServerSocket server;
    private final int port = 9713;
    private ArrayList<Channel> listChannel;
    private Channel lobby;
    
    /**
     * Creates new form Server
     */
    public Server()
    {
        initComponents();
        try
        {
            server = new ServerSocket(port);
            initialize();
            
            Thread t = new Thread(new ConnectionThread());
            t.start();
        }
        catch (IOException ex)
        {
            printConsole("Error while starting server!");
        }
    }
    
    /**
     * This function starts when server starts
     */
    private void initialize()
    {
        //create lobby
        listClient = new ArrayList<>();
        listChannel = new ArrayList<>();
        lobby = new Channel("Lobby", "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtConsole = new javax.swing.JTextArea();
        btnTest = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Console");

        txtConsole.setEditable(false);
        txtConsole.setColumns(20);
        txtConsole.setRows(5);
        jScrollPane1.setViewportView(txtConsole);

        btnTest.setText("Test");
        btnTest.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(btnTest)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnTest)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTestActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnTestActionPerformed
    {//GEN-HEADEREND:event_btnTestActionPerformed
        for(Client client : listClient)
        {
            DataOutputStream dos = null;
            try
            {
                dos = new DataOutputStream(client.getSocket().getOutputStream());
                dos.writeUTF("TEST");
            }
            catch (IOException ex)
            {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        printConsole("TEST Protocol sent to " + listClient.size() + " clients");
    }//GEN-LAST:event_btnTestActionPerformed

    /**
     * This function starts when a client succeed in login
     */
    private void initializeClient(Client client)
    {
        //add client to connected list
        listClient.add(client);
        
        //add client to lobby
        lobby.addClient(client);
        printConsole("Client " + client.getUsername() + " entered server lobby!");
        
        //send all channel list to client
        sendChannelList(client);
    }
    
    /**
     * This function send all channel available to client
     */
    private void sendChannelList(Client client)
    {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run()
            {
                try
                {
                    Thread.sleep(1000);
                    DataOutputStream dos = new DataOutputStream(client.getSocket().getOutputStream());
                    ObjectOutputStream oos = new ObjectOutputStream(client.getSocket().getOutputStream());
                    dos.writeUTF("Channel list");
                    oos.writeObject(listChannel);
                    printConsole("Channel list sent to client " + client.getSocket().getRemoteSocketAddress());
                }
                catch (InterruptedException ex)
                {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (IOException ex)
                {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        t.start();
    }
    
    /**
     * This function handle incoming login request from client
     */
    private void authorizeLogin(Client client)
    {
        DataInputStream dis = null;
        DataOutputStream dos = null;
        try
        {
            dis = new DataInputStream(client.getSocket().getInputStream());
            dos = new DataOutputStream(client.getSocket().getOutputStream());
            String username = dis.readUTF();
            String password = dis.readUTF();
            int result = ServerDAO.checkLogin(username, password);
            dos.writeInt(result);
            if(result == 0) //client login successful
            {
                client.setUsername(username);
                client.setPassword(password);
            }
        }
        catch (IOException ex)
        {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This function handle incoming register request from client
     */
    private void registerAccount(Client client)
    {
        DataInputStream dis = null;
        DataOutputStream dos = null;
        try
        {
            dis = new DataInputStream(client.getSocket().getInputStream());
            dos = new DataOutputStream(client.getSocket().getOutputStream());
            String username = dis.readUTF();
            String password = dis.readUTF();
            int result = ServerDAO.register(username, password);
            dos.writeInt(result);
        }
        catch (IOException ex)
        {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Read protocol head from client
     */
    private void readProtocol(Client client)
    {
        DataInputStream dis = null;
        DataOutputStream dos = null;
        try
        {
            dis = new DataInputStream(client.getSocket().getInputStream());
            dos = new DataOutputStream(client.getSocket().getOutputStream());
            String protocol = dis.readUTF();
            printConsole("Client " + client.getSocket().getRemoteSocketAddress().toString() + ": " + protocol);
            if(protocol.equals("Login"))
            {
                authorizeLogin(client);
                return;
            }
            else if(protocol.equals("Register"))
            {
                registerAccount(client);
                client.getSocket().close();
                return;
            }
            else if(protocol.equals("Ready"))
            {
                client.setReady(true);
                printConsole("Ready received from client " + client.getSocket().getLocalAddress().toString());
                dos.writeUTF("Ready received");
                initializeClient(client);
                return;
            }
        }
        catch (IOException ex)
        {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    /**
     * Print a new line on console
     */
    private void printConsole(String s)
    {
        txtConsole.setText(txtConsole.getText() + "\n" + s);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Windows".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Server().setVisible(true);
            }
        });
    }

    private class ConnectionThread implements Runnable
    {
        @Override
        public void run()
        {
            try
            {
                //waiting for client to connect
                Client client = new Client(server.accept());
                
                //start another thread to wait for a new client to connect
                Thread t = new Thread(new ConnectionThread());
                t.start();
                
                printConsole("Client " + client.getSocket().getRemoteSocketAddress().toString() + " connected!");
                
                while(true)
                {
                    readProtocol(client);
                }
            }
            catch (IOException ex)
            {
                Logger.getLogger(ServerSocketDemo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtConsole;
    // End of variables declaration//GEN-END:variables
}
