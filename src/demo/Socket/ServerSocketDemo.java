/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo.Socket;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

/**
 *
 * @author xSzy
 */
public class ServerSocketDemo extends javax.swing.JFrame
{
    /**
     * Global variables
     */
    ServerSocket server;
    boolean isStarted;
    ArrayList<Socket> listClient;
    ArrayList<DataInputStream> listDis;
    ArrayList<DataOutputStream> listDos;

    /**
     * Creates new form ServerSocketDemo
     */
    public ServerSocketDemo()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtConsole = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtConsole.setEditable(false);
        txtConsole.setColumns(20);
        txtConsole.setRows(5);
        jScrollPane1.setViewportView(txtConsole);

        jLabel1.setText("Console");

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(btnStart)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnStart)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This function starts when the Start button is clicked
     * @param evt 
     */
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnStartActionPerformed
    {//GEN-HEADEREND:event_btnStartActionPerformed
        if(isStarted)
        {
            //if server is started
            //stop the server
            //then change the button to "start"
            try {
                isStarted = false;
                this.btnStart.setText("Start");
                server.close();
                printlnConsole("Server closed.");
            }
            catch (IOException ex) {
                Logger.getLogger(ServerSocketDemo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            //if server is not running
            //start the server
            try
            {
                //initialize serversocket, client and stream list
                listClient = new ArrayList<>();
                listDis = new ArrayList<>();
                listDos = new ArrayList<>();
                server = new ServerSocket(9713);
                printlnConsole("Server started...");
                this.btnStart.setText("Stop");
                isStarted = true;
                
                //create a new thread to handle incoming client request
                Thread t = new Thread(new ConnectionThread());
                
                //start that thread
                t.start();
            }
            catch (IOException ex)
            {
                Logger.getLogger(ServerSocketDemo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnStartActionPerformed

    /**
     * This function return the text in console
     */
    public String getConsole()
    {
        return txtConsole.getText();
    }
    
    /**
     * @param s
     * This function create a new line in console with String s
     */
    public void printlnConsole(String s)
    {
        txtConsole.setText(txtConsole.getText() + s + "\n");
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ServerSocketDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ServerSocketDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ServerSocketDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ServerSocketDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ServerSocketDemo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtConsole;
    // End of variables declaration//GEN-END:variables
    
    /**
     * This class represent a thread, each thread handle one client connection
     * 
     */
    private class ConnectionThread implements Runnable
    {
        @Override
        public void run()
        {
            try
            {
                //waiting for client to connect
                Socket client = server.accept();
                
                //when client connected, add this client to connected list
                listClient.add(client);
                printlnConsole("Client " + listClient.indexOf(client) + " has connected to server!");
                
                //start another thread to wait for a new client to connect
                Thread t = new Thread(new ConnectionThread());
                t.start();
                
                //set up data stream
                DataInputStream dis = new DataInputStream(client.getInputStream());
                DataOutputStream dos = new DataOutputStream(client.getOutputStream());
                
                //save data stream to list
                listDis.add(dis);
                listDos.add(dos);
                
                //listen to client's message
                while(isStarted)
                {
                    //using protocol to find out what kind of request the client is making
                    //for this example, disconnect message starts with int = -1
                    //write message starts with int = 1, after that a string with the message as content
                    int protocol = dis.readInt();
                    if(protocol == -1)   //client disconnect
                    {
                        //close the data stream and delete it from the list
                        dis.close();
                        dos.close();
                        listDis.remove(dis);
                        listDos.remove(dos);
                        
                        //close the client socket and remove it from the list
                        printlnConsole("Client " + listClient.indexOf(client) + " has disconnected from server.");
                        client.close();
                        listClient.remove(client);
                        break;
                    }
                    else if(protocol == 1)  //client write message
                    {
                        //attemp to read that message
                        String s = dis.readUTF();
                        printlnConsole("Client " + listClient.indexOf(client) + ": " + s);
                        
                        //broadcast that message to all other online client
                        for(Socket c : listClient)
                        {
                            listDos.get(listClient.indexOf(c)).writeInt(2);     //broadcast protocol
                            listDos.get(listClient.indexOf(c)).writeUTF("Client " + listClient.indexOf(client) + ": " + s);
                        }
                    }
                }
            }
            catch (IOException ex)
            {
                Logger.getLogger(ServerSocketDemo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
